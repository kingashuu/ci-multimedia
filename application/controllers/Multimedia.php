<?php
/*
 Generated by Manuigniter v2.0 
 www.manuigniter.com
*/
class Multimedia extends CI_Controller
{
  function __construct()
  {
    parent::__construct();
    $this->load->model('Multimedia_model');
    $this->load->library('session');
    if (!$this->session->userdata('isUserLoggedIn')) {
      redirect('Auth/login');
    }
  }

  function test()
  {

    $max_id = $this->get_max();
    $code = $this->_auto_gen_code();
    for ($num = 1; $num <= 50; $num++)
      echo sprintf("%'.05d\n", $num);
    echo $max_id;
    echo "<br>";
    echo $code;
  }


  function _auto_gen_code()
  {
    $max_id = $this->get_max();
    // $fnam=$this->get_code($max_id);
    $num = $max_id + 1;
    return sprintf("%'.05d\n", $num);
  }

  function get_code($max_id)
  {
    $max_id = $this->get_max($max_id);
    $query = $this->get_where('M_ID', $max_id);
    foreach ($query->result() as $row) {
      $Code = $row->Code;
    }
    // echo $Code;
    return $Code;
  }


  function get_max()
  {
    $this->load->model('Multimedia_model');
    $max_id = $this->Multimedia_model->get_max();
    return $max_id;
  }
  function get_where($id)
  {
    $this->load->model('Multimedia_model');
    $query = $this->Multimedia_model->get_where($id);
    return $query;
  }
  function get_where_custom($col, $value)
  {
    $this->load->model('Multimedia_model');
    $query = $this->Multimedia_model->get_where_custom($col, $value);
    return $query;
  }


  /*
* Listing of multimedia
 */
  public function index()
  {
    try {
      $data['noof_page'] = 0;
      $data['multimedia'] = $this->Multimedia_model->get_all_with_asso_multimedia();
      $data['_view'] = 'multimedia/index';
      $this->load->view('layouts/main', $data);
    } catch (Exception $ex) {
      throw new Exception('Multimedia Controller : Error in index function - ' . $ex);
    }
  }
  /*
  * Adding a new multimedia
  */
  function add()
  {
    try {
      $params = array(
        'Code' => $this->_auto_gen_code(),
        'Name' => $this->input->post('Name'),
        'Description' => $this->input->post('Description'),
        //'Recorde_Date'=> $this->input->post('Recorde_Date'),
        //'Size'=> $this->input->post('Size'),
        'Classification' => $this->input->post('Classification'),
        'Sub_Classification' => $this->input->post('Sub_Classification'),
        'upload_by' => $this->session->userdata('employee_name'),
        'Language' => $this->input->post('Language'),
        'Video_Type' => $this->input->post('Video_Type'),
        'Recorde_By' => $this->input->post('Recorde_By'),
      );
      $this->load->library('upload');
      $this->load->library('form_validation');
      $foldername = 'Attachment';
      $fileuploaddire = './resource/' . $foldername;
      $directory = base_url('resource/') . $foldername;
      if (!is_dir($fileuploaddire)) {
        mkdir($fileuploaddire, 0777, true);
      }
      $Attachment = "";
      if (!empty($_FILES['Attachment']['name'])) {
        $filename = time() . $_FILES['Attachment']['name'];
        $Attachment = str_replace(' ', '_', $filename);
        $config['file_name'] = $Attachment;
        $config['upload_path'] = $fileuploaddire;
        $config['allowed_types'] = 'pdf|doc|docx|docs|jpg|jpeg|png|mp3|mp4|';
        $config['max_length'] = '100000000';

        $this->upload->initialize($config);
        if (!$this->upload->do_upload('Attachment')) {
          $error = $this->upload->display_errors();
          // print_r($error);
          $msg = 'File Can not Upload ..Please upload pdf |doc |docs|jpg|jpeg|png  type only and Maximum file size 25MB ' . $error;
          $this->session->set_flashdata('Attachment', $msg);
          $this->form_validation->set_rules('Attachment', $msg, 'required');
        } else {
          $filedata = $this->upload->data();
          $params['Type'] = $this->upload->data('file_ext');
          $params['Size'] = $this->upload->data('file_size');
          $params['Recorde_Date'] = date("Y-m-d H:i:s");
        }
      } else {
        //$this->form_validation->set_rules('Attachment','file','required');
        $this->session->set_flashdata('Attachment', 'File required');
      }
      $params['Attachment'] = $Attachment;
      if (isset($_POST) && count($_POST) > 0) {
        var_dump($params);
        $M_ID = $this->Multimedia_model->add_multimedia($params);
        $this->session->set_flashdata('alert_msg', '<div class="alert alert-success text-center">Succesfully added.</div>');
        redirect('multimedia/index');
      } else {
        $this->load->model('Classification_model');
        $data['all_classification'] = $this->Classification_model->get_all_classification();
        $this->load->model('Sub_classification_model');
        $data['all_sub_classification'] = $this->Sub_classification_model->get_all_sub_classification();
        $data['_view'] = 'multimedia/add';
        $this->load->view('layouts/main', $data);
      }
    } catch (Exception $ex) {
      throw new Exception('Multimedia Controller : Error in add function - ' . $ex);
    }
  }

  /*
  * Editing a multimedia
 */
  public function edit($M_ID)
  {
    try {
      $data['multimedia'] = $this->Multimedia_model->get_multimedia($M_ID);
      $this->load->library('upload');
      $this->load->library('form_validation');
      if (isset($data['multimedia']['M_ID'])) {
        $params = array(
          'Code' => $this->input->post('Code'),
          'Name' => $this->input->post('Name'),
          'Description' => $this->input->post('Description'),
          //'Recorde_Date'=> $this->input->post('Recorde_Date'),
          //'Size'=> $this->input->post('Size'),
          'Classification' => $this->input->post('Classification'),
          'Sub_Classification' => $this->input->post('Sub_Classification'),
          //'Type'=> $this->input->post('Type'),
          'upload_by' => $this->session->userdata('employee_name'),
          'Language' => $this->input->post('Language'),
          'Video_Type' => $this->input->post('Video_Type'),
          'Recorde_By' => $this->input->post('Recorde_By'),
        );
        $foldername = 'Attachment';
        $fileuploaddire = './resource/' . $foldername;
        $directory = base_url('resource/') . $foldername;
        if (!is_dir($fileuploaddire)) {
          mkdir($fileuploaddire, 0777, true);
        }
        $Attachment = "";
        if (!empty($_FILES['Attachment']['name'])) {
          $filename = time() . $_FILES['Attachment']['name'];
          $Attachment = str_replace(' ', '_', $filename);
          $config['file_name'] = $Attachment;
          $config['upload_path'] = $fileuploaddire;
          $config['allowed_types'] = 'pdf|doc|docx|docs|jpg|jpeg|png|mp3|mp4|';
          $config['max_length'] = '100000000';
          $this->upload->initialize($config);
          if (!$this->upload->do_upload('Attachment')) {
            $error = $this->upload->display_errors();
            // print_r($error);
            $msg = 'File Can not Upload ..Please upload pdf |doc |docs|jpg|jpeg|png  type only and Maximum file size 25MB ' . $error;
            $this->session->set_flashdata('Attachment', $msg);
            $this->form_validation->set_rules('Attachment', $msg, 'required');
          } else {
            $pathn = FCPATH . 'resource/Attachment/' . $data['multimedia']['Attachment'];
            if (is_file($pathn))
              unlink($pathn);
            $params['Attachment'] = $Attachment;

            $filedata = $this->upload->data();
            $params['Type'] = $this->upload->data('file_ext');
            $params['Size'] = $this->upload->data('file_size');
            $params['Recorde_By'] = date("Y-m-d H:i:s");
          }
        } else {
        }
        if (isset($_POST) && count($_POST) > 0) {
          $this->Multimedia_model->update_multimedia($M_ID, $params);
          $this->session->set_flashdata('alert_msg', '<div class="alert alert-success text-center"> Successfully updated.</div>');
          redirect('multimedia/index');
        } else {
          $this->load->model('Classification_model');
          $this->load->model('Sub_classification_model');
          $data['all_classification'] = $this->Classification_model->get_all_classification();
          $data['all_sub_classification'] = $this->Sub_classification_model->get_all_sub_classification();
          $data['M_ID'] = $data['multimedia']['M_ID'];
          $data['Code'] = $data['multimedia']['Code'];
          $data['Name'] = $data['multimedia']['Name'];
          $data['Description'] = $data['multimedia']['Description'];
          $data['Attachment'] = $data['multimedia']['Attachment'];
          $data['Recorde_Date'] = $data['multimedia']['Recorde_Date'];
          $data['Size'] = $data['multimedia']['Size'];
          $data['Type'] = $data['multimedia']['Type'];
          $data['Recorde_By'] = $data['multimedia']['Recorde_By'];
          $data['Language'] = $data['multimedia']['Language'];
          $data['Video_Type'] = $data['multimedia']['Video_Type'];
          $data['_view'] = 'multimedia/edit';
          $this->load->view('layouts/main', $data);
        }
      } else
        show_error('The multimedia you are trying to edit does not exist.');
    } catch (Exception $ex) {
      throw new Exception('Multimedia Controller : Error in edit function - ' . $ex);
    }
  }
  /*
  * Deleting multimedia
  */
  function remove($M_ID)
  {
    try {
      $multimedia = $this->Multimedia_model->get_multimedia($M_ID);
      // check if the multimedia exists before trying to delete it
      if (isset($multimedia['M_ID'])) {
        $this->Multimedia_model->delete_multimedia($M_ID);
        $this->session->set_flashdata('alert_msg', '<div class="alert alert-success text-center">Succesfully Removed.</div>');
        $pathn = FCPATH . 'resource/Attachment/' . $multimedia['Attachment'];
        if (is_file($pathn))
          unlink($pathn);
        redirect('multimedia/index');
      } else
        show_error('The multimedia you are trying to delete does not exist.');
    } catch (Exception $ex) {
      throw new Exception('Multimedia Controller : Error in remove function - ' . $ex);
    }
  }
  /*
  * View more a multimedia
 */
  public function view_more($M_ID)
  {
    try {
      $data['multimedia'] = $this->Multimedia_model->get_multimedia($M_ID);
      if (isset($data['multimedia']['M_ID'])) {
        $data['M_ID'] = $data['multimedia']['M_ID'];
        $data['Code'] = $data['multimedia']['Code'];
        $data['Name'] = $data['multimedia']['Name'];
        $data['Description'] = $data['multimedia']['Description'];
        $data['Attachment'] = $data['multimedia']['Attachment'];
        $data['Recorde_Date'] = $data['multimedia']['Recorde_Date'];
        $data['Size'] = $data['multimedia']['Size'];
        $data['Classification'] = $data['multimedia']['Classification'];
        $data['Sub_Classification'] = $data['multimedia']['Sub_Classification'];
        $data['Type'] = $data['multimedia']['Type'];
        $data['Recorde_By'] = $data['multimedia']['Recorde_By'];



        $data['_view'] = 'multimedia/view_more';
        $this->load->view('layouts/main', $data);
      } else
        show_error('The multimedia you are trying to view more does not exist.');
    } catch (Exception $ex) {
      throw new Exception('Multimedia Controller : Error in View more function - ' . $ex);
    }
  }
  function download($Name = NULL)
  {
    // load download helder
    $this->load->helper('download');
    // read file contents
    $data = file_get_contents(base_url('/uploads/' . $Name));
    force_download($Name, $data);
  }

  public function search_more($M_ID)
  {
    try {
      $data['multimedia'] = $this->Multimedia_model->get_multimedia($M_ID);
      if (isset($data['multimedia']['M_ID'])) {
        $data['_view'] = 'multimedia/search_more';
        $this->load->view('layouts/main', $data);
      } else
        show_error('The multimedia you are trying to view more does not exist.');
    } catch (Exception $ex) {
      throw new Exception('Multimedia Controller : Error in View more function - ' . $ex);
    }
  }

  public function search_multimedia()
  {
    try {
      $data['noof_page'] = 0;
      $data['multimedia'] = $this->Multimedia_model->get_all_with_asso_multimedia();
      $data['_view'] = 'multimedia/search';
      $this->load->view('layouts/main', $data);
    } catch (Exception $ex) {
      throw new Exception('Multimedia Controller : Error in index function - ' . $ex);
    }
  }


  /*
* Listing of multimedia
 */
  public function search_by_clm()
  {
    if ($_POST) {
      $column_name = $this->input->post('column_name');
      $value_id = $this->input->post('value_id');
      $search_by = $this->input->post('searchby');
      $data['noof_page'] = 0;
      $params = array();
      $data['multimedia'] = $this->Multimedia_model->get_all_with_asso_multimedia_by_cat($column_name, $value_id, $search_by);
    } else {
      $data['noof_page'] = 0;
      $data['multimedia'] = $this->Multimedia_model->get_all_with_asso_multimedia();
    }

    $data['_view'] = 'multimedia/search';
    $this->load->view('layouts/main', $data);
  }

  public function report()
  {
    $data['_view'] = 'multimedia/report';
    $this->load->view('layouts/main', $data);
  }

  /*
  * get get_search_values_byclms by id
 */
  public function get_search_values_by_Classification()
  {
    $Classification = $this->input->post('value');
    $this->load->model('Classification_model');
    $data['all_classification'] = $this->Classification_model->get_all_classification();
    $multimedia = $this->Multimedia_model->get_all_with_asso_multimedia();
    if (isset($data['all_classification']) && $data['all_classification'] != null) {
      foreach ($data['all_classification'] as $m) {
        echo          "<option value='" . $m['Classification_Name'] . "'> " . $m['Classification_Name'] . "</option>";
      }
    } else {
      echo '<tr>No data found</tr>';
    }
  }
  /*
  * get get_search_values_byclms by id
 */
  public function get_search_values_by_Sub_Classification()
  {
    $Sub_Classification = $this->input->post('value');
    $this->load->model('Sub_classification_model');
    $data['all_sub_classification'] = $this->Sub_classification_model->get_all_sub_classification();
    $multimedia = $this->Multimedia_model->get_all_with_asso_multimedia();
    if (isset($data['all_sub_classification']) && $data['all_sub_classification'] != null) {
      foreach ($data['all_sub_classification'] as $m) {
        echo          "<option value='" . $m['Sub_Classification_Name'] . "'> " . $m['Sub_Classification_Name'] . "</option>";
      }
    } else {
      echo '<tr>No data found</tr>';
    }
  }
  /*
* get search values by column- multimedia
 */
  public function get_search_values_by_clm()
  {
    $clm_name = $this->input->post('clm_name');
    $value = $this->input->post('value');
    $id = $this->input->post('id');
    $params = array(
      $clm_name => $value,
    );
    $this->Multimedia_model->update_multimedia($id, $params);
    $data['noof_page'] = 0;
    $data['multimedia'] = $this->Multimedia_model->get_all_with_asso_multimedia();
    $this->load->view('multimedia/search', $data);
  }
}
